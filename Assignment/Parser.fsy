// Open the file that defines the type "expr" we shall use as AST
%{
open AST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <string> STRING
%token TIMES DIV PLUS MINUS POW LPAR RPAR LSQUARE RSQUARE TRUE FALSE AND OR LOGAND LOGOR NEGATE EQUAL NOTEQUAL GREATERTHAN GREATEREQUAL LESSTHAN LESSEQUAL ASSIGN SKIP SEMICOLON IF FI DO OD COND ELSE EOF
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left PLUS MINUS
%left TIMES DIV
%left AND LOGAND
%left OR LOGOR
%left NEGATE
%right POW SEMICOLON


// We declare the initial non-terminal symbol
%start start
%start startGCL


// We specify the return type of each of then non-terminal symbols
%type <AST.expr> start
%type <AST.expr> expression
%type <AST.Command> startGCL
%type <AST.Command> command
%type <AST.BooleanExpression> boolean
%type <AST.GuardedCommand> guardedcommand

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
startGCL: command EOF             { $1 }
start: expression EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

// a  ::=  n  |  x  |  A[a]  |  a + a  |  a - a  |  a * a  |  a / a  |  - a  |  a ^ a  |  (a)
expression:
  | NUM                               { Num($1) }
  | STRING                            { String($1) }
  | STRING LSQUARE expression RSQUARE { ArrayAccess($1,$3) }
  | expression TIMES expression       { TimesExpr($1,$3) }
  | expression DIV expression         { DivExpr($1,$3) }
  | expression PLUS expression        { PlusExpr($1,$3) }
  | expression MINUS expression       { MinusExpr($1,$3) }
  | expression POW expression         { PowExpr($1,$3) }
  | MINUS expression                  { UMinusExpr($2) }
  | PLUS expression                   { UPlusExpr($2) }
  | LPAR expression RPAR              { $2 } // { Par($2) }

// b  ::=  true  |  false  |  b & b  |  b | b  |  b && b  |  bÂ || b  |  ! b
//      |  a = a  |  a != a  |  a > a  |  a >= a  |  a < a  |  a <= a  |  (b)
boolean:
  | TRUE                                { True }
  | FALSE                               { False }
  | boolean AND boolean                 { And($1,$3) }
  | boolean LOGAND boolean              { Or($1,$3) }
  | boolean OR boolean                  { LogAnd($1, $3)}
  | boolean LOGOR boolean               { LogOr($1, $3)}
  | NEGATE boolean                      { Negate($2) }
  | LPAR boolean RPAR                   { Par($2) }    
  | expression EQUAL expression         { Equal($1, $3) }
  | expression NOTEQUAL expression      { NotEqual($1, $3) }
  | expression GREATERTHAN expression   { GreaterThan($1, $3) }
  | expression GREATEREQUAL expression  { GreaterEqual($1, $3) }
  | expression LESSTHAN expression      { LessThan($1, $3) }
  | expression LESSEQUAL expression     { LessEqual($1, $3) }

// C  ::=  x := a  |  A[a] := a  |  skip  |  C ; C  |  if GC fi  |  do GC od
command:
  | STRING ASSIGN expression                                { VariableAssign($1, $3) }
  | STRING LSQUARE expression RSQUARE ASSIGN expression     { ArrayAssign($1,$3,$6) }
  | SKIP                                                    { Skip }
  | command SEMICOLON command                               { Sequence($1,$3) }
  | IF guardedcommand FI                                    { If($2) }
  | DO guardedcommand OD                                    { Do($2) }

// GC ::=  b -> C  |  GC [] GC
guardedcommand:
  | boolean COND command                  { Cond($1, $3) }
  | guardedcommand ELSE guardedcommand    { Else($1, $3) }

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%